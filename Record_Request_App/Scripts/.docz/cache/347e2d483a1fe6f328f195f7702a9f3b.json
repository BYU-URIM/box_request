{"remainingRequest":"/home/urimdev/Github/box_request/Record_Request_App/Scripts/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/home/urimdev/Github/box_request/Record_Request_App/Scripts/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[],\"cacheDirectory\":true,\"babelrc\":false}!/home/urimdev/Github/box_request/Record_Request_App/Scripts/src/components/DepartmentDropdown/readme.mdx","dependencies":[{"path":"/home/urimdev/Github/box_request/Record_Request_App/Scripts/src/components/DepartmentDropdown/readme.mdx","mtime":1543535258909},{"path":"/home/urimdev/Github/box_request/Record_Request_App/Scripts/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1537981783892},{"path":"/home/urimdev/Github/box_request/Record_Request_App/Scripts/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1537981783837}],"contextDependencies":[],"result":["var _jsxFileName = \"/home/urimdev/Github/box_request/Record_Request_App/Scripts/src/components/DepartmentDropdown/readme.mdx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nimport { DepartmentDropdown } from \"./DepartmentDropdown\";\nimport { Playground, PropsTable } from \"docz\";\nimport { ddP } from \"./documentationData\";\nimport { initializeIcons } from \"@uifabric/icons\";\nexport default (function (_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components,\n    props: {\n      \"id\": \"departmentdropdown\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"DepartmentDropdown\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"component\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Component\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"this-component-is-used-to-select-the-users-department-boxes-that-appear-in-the-boxlist-component-depend-on-which-department-is-selected\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"This component is used to select the user's department. Boxes that appear in the BoxList component depend on which department is selected.\"), React.createElement(Playground, {\n    __position: 0,\n    __code: \"<div>\\n  <DepartmentDropdown\\n    handleChanged={ddP.handleChanged}\\n    options={[\\n      {\\n        key: 45123,\\n        text: '45123 - The Man Department',\\n      },\\n      {\\n        key: 12345,\\n        text: '12345 - The Woman Department',\\n      },\\n    ]}\\n    dropdownInfo={ddP.dropdownInfo}\\n    initializeBoxForm={ddP.initializeBoxForm}\\n  />\\n</div>\",\n    __scope: {\n      props: props,\n      DepartmentDropdown: DepartmentDropdown,\n      ddP: ddP,\n      initializeIcons: initializeIcons\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(DepartmentDropdown, {\n    handleChanged: ddP.handleChanged,\n    options: [{\n      key: 45123,\n      text: \"45123 - The Man Department\"\n    }, {\n      key: 12345,\n      text: \"12345 - The Woman Department\"\n    }],\n    dropdownInfo: ddP.dropdownInfo,\n    initializeBoxForm: ddP.initializeBoxForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Hint: If the playground above doesn't show code after line 11, click on the empty space below line 11.\")), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"props-interface\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Props Interface\"), React.createElement(PropsTable, {\n    of: DepartmentDropdown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"department-dropdown-props-explained\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Department Dropdown Props Explained\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"You can easily see what the options must look like \", React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"(in our code for the actual application, we automated the process because we have a lot of departments and weren't going to hardcode them)\"), \", and can even edit the names of the departments if you'd like! They'll change in the playground component. Changing the keys will break it in this example, though.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"The following props are coded below. These can't be changed; they're more to give you an example of values you need to put into the handleChanged, dropdownInfo, and initializeBoxForm.\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"ddphandlechanged\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"ddP.handleChanged\"), React.createElement(MDXTag, {\n    name: \"hr\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-javascript\",\n      \"metaString\": \"\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"const departments:IDepartment[] = [\\n    {\\n        name: \\\"The Man Department\\\",\\n        id: 45123,\\n    },\\n    {\\n        name: \\\"The Woman Department\\\",\\n        id: 12345\\n    }\\n]\\n\\nlet selectedDep = {\\n    id: 45123\\n}\\n\\nconst handleChanged = (id) => {\\n    if (departments.find(_dep => _dep.id === id)) {\\n    selectedDep = id\\n    }\\n} \\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"handleChanged takes the id of the input \", React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"(the new department being selected)\"), \" and finds the same id in the array of available departments. When it finds that id, it sets that id to the new selected department.\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"ddpoptions\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"ddP.options\"), React.createElement(MDXTag, {\n    name: \"hr\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"For the options, you just need an array of departments that have attributes of \", React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"name\"), \" and \", React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"id\"), \".\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"ddpdropdowninfo\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"ddP.dropdownInfo\"), React.createElement(MDXTag, {\n    name: \"hr\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-javascript\",\n      \"metaString\": \"\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"let selectedDep = {\\n    id: 45123\\n}\\n\\nfunction dropdownInfo(): IDropdownInfo {\\n    const info: IDropdownInfo = {\\n        title: \\\"\\\",\\n        key: selectedDep ? selectedDep.id : 0,\\n        placeHolder: \\\"Departments\\\",\\n    }\\n    info.title = selectedDep ? \\\"Your Department:\\\" : \\\"Select a Department\\\"\\n\\n    return info\\n}\\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"dropdownInfo is used to decide if the user has 1 or more available departments. If they have more than one department, then they're given a dropdown list. Otherwise, they get a simple header.\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"ddpinitializeboxform\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"ddP.initializeBoxForm\"), React.createElement(MDXTag, {\n    name: \"hr\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-javascript\",\n      \"metaString\": \"\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"const boxForm = () => (uiStore.form = FormTypes.NEW_BOX)\\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"initializeBoxForm accesses the stores to open a form window where the user can request to create a new a box or boxes. The function needs to return an existing FormType.\"));\n});",{"version":3,"sources":["/home/urimdev/Github/box_request/Record_Request_App/Scripts/src/components/DepartmentDropdown/readme.mdx"],"names":["React","MDXTag","DepartmentDropdown","Playground","PropsTable","ddP","initializeIcons","components","props","handleChanged","key","text","dropdownInfo","initializeBoxForm"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { DepartmentDropdown } from \"./DepartmentDropdown\"\nimport { Playground, PropsTable } from \"docz\"\nimport { ddP } from \"./documentationData\"\nimport { initializeIcons } from \"@uifabric/icons\"\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"departmentdropdown\"}}>{`DepartmentDropdown`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"component\"}}>{`Component`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"this-component-is-used-to-select-the-users-department-boxes-that-appear-in-the-boxlist-component-depend-on-which-department-is-selected\"}}>{`This component is used to select the user's department. Boxes that appear in the BoxList component depend on which department is selected.`}</MDXTag>\n<Playground __position={0} __code={`<div>\n  <DepartmentDropdown\n    handleChanged={ddP.handleChanged}\n    options={[\n      {\n        key: 45123,\n        text: \\'45123 - The Man Department\\',\n      },\n      {\n        key: 12345,\n        text: \\'12345 - The Woman Department\\',\n      },\n    ]}\n    dropdownInfo={ddP.dropdownInfo}\n    initializeBoxForm={ddP.initializeBoxForm}\n  />\n</div>`} __scope={{props,DepartmentDropdown,ddP,initializeIcons}}>\n    <div>\n        <DepartmentDropdown\n            handleChanged={ddP.handleChanged}\n            options={[\n                {\n                    key: 45123,\n                    text: \"45123 - The Man Department\"\n                },\n                {\n                    key: 12345,\n                    text: \"12345 - The Woman Department\"\n                }\n            ]}\n            dropdownInfo={ddP.dropdownInfo}\n            initializeBoxForm={ddP.initializeBoxForm}\n        />\n    </div>\n</Playground>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Hint: If the playground above doesn't show code after line 11, click on the empty space below line 11.`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props-interface\"}}>{`Props Interface`}</MDXTag>\n<PropsTable of={DepartmentDropdown} /> \n<MDXTag name=\"h2\" components={components} props={{\"id\":\"department-dropdown-props-explained\"}}>{`Department Dropdown Props Explained`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can easily see what the options must look like `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`(in our code for the actual application, we automated the process because we have a lot of departments and weren't going to hardcode them)`}</MDXTag>{`, and can even edit the names of the departments if you'd like! They'll change in the playground component. Changing the keys will break it in this example, though.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The following props are coded below. These can't be changed; they're more to give you an example of values you need to put into the handleChanged, dropdownInfo, and initializeBoxForm.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"ddphandlechanged\"}}>{`ddP.handleChanged`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\",\"metaString\":\"\"}}>{`const departments:IDepartment[] = [\n    {\n        name: \"The Man Department\",\n        id: 45123,\n    },\n    {\n        name: \"The Woman Department\",\n        id: 12345\n    }\n]\n\nlet selectedDep = {\n    id: 45123\n}\n\nconst handleChanged = (id) => {\n    if (departments.find(_dep => _dep.id === id)) {\n    selectedDep = id\n    }\n} \n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`handleChanged takes the id of the input `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`(the new department being selected)`}</MDXTag>{` and finds the same id in the array of available departments. When it finds that id, it sets that id to the new selected department.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"ddpoptions\"}}>{`ddP.options`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"p\" components={components}>{`For the options, you just need an array of departments that have attributes of `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`name`}</MDXTag>{` and `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`id`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"ddpdropdowninfo\"}}>{`ddP.dropdownInfo`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\",\"metaString\":\"\"}}>{`let selectedDep = {\n    id: 45123\n}\n\nfunction dropdownInfo(): IDropdownInfo {\n    const info: IDropdownInfo = {\n        title: \"\",\n        key: selectedDep ? selectedDep.id : 0,\n        placeHolder: \"Departments\",\n    }\n    info.title = selectedDep ? \"Your Department:\" : \"Select a Department\"\n\n    return info\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`dropdownInfo is used to decide if the user has 1 or more available departments. If they have more than one department, then they're given a dropdown list. Otherwise, they get a simple header.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"ddpinitializeboxform\"}}>{`ddP.initializeBoxForm`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\",\"metaString\":\"\"}}>{`const boxForm = () => (uiStore.form = FormTypes.NEW_BOX)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`initializeBoxForm accesses the stores to open a form window where the user can request to create a new a box or boxes. The function needs to return an existing FormType.`}</MDXTag></MDXTag>\n  "]}]}